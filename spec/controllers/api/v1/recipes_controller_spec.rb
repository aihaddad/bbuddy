require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe API::V1::RecipesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Recipe. As you add validations to Recipe, be sure to
  # adjust the attributes here as well.

  let(:user)           {create :user}
  let(:valid_recipe)   {attributes_for :recipe}
  let(:invalid_recipe) {{url: 'invalid'}}

  describe "GET #index" do

    before do
      @recipe = user.recipes.create valid_recipe
      get :index
    end

    it 'returns status 200:success' do
      is_expected.to respond_with 200
    end

    it "assigns all recipes as @recipes" do
      expect(assigns(:recipes)).to eq [@recipe]
    end

    it 'returns a collection of all recipes' do
      expect(json_response.size).to eq 1
    end
  end # index

  describe "GET #show" do

    before do
      @recipe = user.recipes.create(valid_recipe)
      get :show, {id: @recipe.to_param}
    end

    it 'returns status 200:success' do
      is_expected.to respond_with 200
    end

    it "assigns the requested recipe as @recipe" do
      expect(assigns(:recipe)).to eq @recipe
    end

    it "returns recipe information in a hash" do
      expect(json_response[:url]).to eq @recipe.url
    end
  end # show

  describe "POST #create" do
    # TO-DO: job queue tests
    include ActiveJob::TestHelper

    context "authenticated user" do

      before do
        authenticate_with_token user
      end

      context "with valid params" do

        it "creates a new Recipe" do
          expect {
            post :create, {recipe: valid_recipe}
          }.to change(Recipe, :count).by 1
        end

        it "assigns a newly created recipe as @recipe" do
          post :create, {recipe: valid_recipe}
          expect(assigns(:recipe)).to be_a(Recipe)
          expect(assigns(:recipe)).to be_persisted
        end

        it 'returns status 201:created' do
          post :create, {recipe: valid_recipe}
          is_expected.to respond_with 201
        end

        it "renders json for the created record" do
          post :create, {recipe: valid_recipe}
          expect(json_response[:url]).to eq valid_recipe[:url]
        end

        it 'adds recipe processing to job queue' do
          post :create, {recipe: valid_recipe}
          expect(enqueued_jobs.size).to eq 1
        end
      end

      context "with invalid params" do

        before do
          post :create, {recipe: invalid_recipe}
        end

        it 'returns status 422:unprocessable_entity' do
          is_expected.to respond_with 422
        end

        it "assigns a newly created but unsaved recipe as @recipe" do
          expect(assigns(:recipe)).to be_a_new(Recipe)
        end

        it "renders validation errors" do
          expect(json_response[:url]).to be_any {|e| e =~ /invalid URL/}
        end
      end
    end

    context "unauthenticated user" do
      it 'returns status 401:unauthorized' do
        post :create, {recipe: valid_recipe}
        is_expected.to respond_with 401
      end
    end
  end # create

  describe "DELETE #destroy" do
    context "authenticated user" do

      before do
        @recipe = user.recipes.create valid_recipe
        authenticate_with_token user
      end

      it "destroys the requested recipe" do
        expect {
          delete :destroy, {id: @recipe.to_param}
        }.to change(Recipe, :count).by(-1)
      end

      it 'returns 204:no_content' do
        delete :destroy, {id: @recipe.to_param}
        is_expected.to respond_with 204
      end
    end
  end

end
